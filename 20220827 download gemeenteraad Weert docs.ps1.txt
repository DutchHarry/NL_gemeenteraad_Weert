<#
Purpose:
Download from a list of hyperlinks in a file
replicate directory structure from servers
record results
document link and download path

Note: 40 to 50 Gb of files!!!

#>

#file with links
#$files = "S:\_ue\20220827_GemeenteWeertDocumentenLijstKomend.txt"                                                  <# CHANGE #>
$files = "S:\_ue\20220827_GemeenteWeertDocumentenLijst.txt"
# destination directory  with trailing \
$DestinationDirectory = "E:\W5"         #without /!                                               <# CHANGE #>


#change window title
$host.ui.RawUI.WindowTitle = "READING URL LINES AND DOWNLOADING IN DIR STRUCTURE"

$sleepdelay = 5   #seconds to wait after each request in BITSTRANSFER


# logging the output
$logs = $null
$logs = "$files 1.log"   
#summary counters
$FilesAlreadyExisting = 0
$NewFilesAdded = 0
$FilesErrored = 0
#logging urls and filenames
$url2file = $null
$url2file = "$files 1 url2file tab delimited.txt"
#delete old url2file
$fileexists = Test-Path $url2file
if ($fileexists -eq $true) {
Remove-Item -Force -Path $url2file  
}
$fileexists = Test-Path $logs
if ($fileexists -eq $true) {
Remove-Item -Force -Path $logs  
}

# add headers in tab delimited file
Add-Content $url2file "url�file"   # changed from tab to � on 20160826

#initialise client
$wc = New-Object System.Net.WebClient

$counter = 0

$reader = [System.IO.File]::OpenText($files)
try {
for(;;) {
$counter++
$line = $reader.ReadLine()
if ($line -eq $null) { break }
if ($line.substring(0,2) -eq "::") { continue }
# process the line
$source = $line
$destination = $source

# url to directory
$destination = $destination.replace('/','\')
# remove https
$destination = $destination.replace('https:\\',"")
# remove http
$destination = $destination.replace('http:\\',"")
# remove : (in times)
$destination = $destination.replace(':',"_")
# join to directory
$destination = "$DestinationDirectory\$destination"
# check $destination
Write-Host  "$counter $destination"
# 
try {  
# create zero length file and directory structure 
# check if file exists
$fileexists = Test-Path $destination
if ($fileexists -eq $true) {
#increment counter
$FilesAlreadyExisting++
# output to screen and logfile
Write-Output "Already Exists : $line" #| Tee-Object -filepath "$logs" -Append
# append link and filename to tab delimited file
Add-Content $url2file "$source�$destination"  # changed from tab to � on 20160826
# do nothing
}else{
#FORCE CREATE EMPTY FILE (Force also creates any higher dirs needed)
New-Item -ItemType File -Force -Path $destination  | Out-Null <# Out-Null to suppress output #>

# get the file
try {       
$wc.Downloadfile( $source.replace('???','%E2%80%93'), $destination)
# append link and filename to tab delimited file
Add-Content $url2file "$source�$destination"  # changed from tab to � on 20160826
# output to screen and logfile
Write-Output "Added File     : $line" #| Tee-Object -filepath "$logs" -Append
}catch{
try {
# 1 Invoke-WebRequest # SLOW due to parsing
Invoke-WebRequest $source.replace('???','%E2%80%93') -OutFile $destination
# Invoke-WebRequest $source -OutFile $destination
# append link and filename to tab delimited file
Add-Content $url2file "$source�$destination"  # changed from tab to � on 20160826
# output to screen and logfile
Write-Output "Added File     : $line" #| Tee-Object -filepath "$logs" -Append
}catch{
#increment counter
$FilesErrored++
Write-Output $_.Exception.Message | Tee-Object -filepath "$logs" -Append
Write-Output ("ErrorCode      : $errorcode") | Tee-Object -filepath "$logs" -Append
Write-Output ("On address     : $source") | Tee-Object -filepath "$logs" -Append
# remove zero length file
Remove-Item  $destination -Force | Out-Null # Out-Null to suppress output #
Write-Host "Both webclient and Invoke-WebRequest failed"
}
}
#increment counter
$NewFilesAdded++
} #if else
}catch{
$errorcode = $_.Exception.Response.StatusCode.Value__ 
#increment counter
$FilesErrored++
Write-Output ("ErrorCode      : $errorcode") | Tee-Object -filepath "$logs" -Append
Write-Output ("On address     : $source") | Tee-Object -filepath "$logs" -Append
# remove zero length file
Remove-Item  $destination -Force | Out-Null # Out-Null to suppress output #
} #2nd try
} # for loop
} # 1st try  
finally {
$reader.Close()
}


#
# clean out any empty folders resulting from errors above
Get-ChildItem $DestinationDirectory -Force -Recurse | `
Where {$_.PSIsContainer -and @(Get-ChildItem -LiteralPath $_.Fullname -Force -Recurse | Where {!$_.PSIsContainer}).Length -eq 0} | `
Remove-Item -Force -Recurse | `
Out-Null  <# -whatif #>

# clean empty files (from BITS transfer)
#Force needed for read-only and hidden files (remains from errored BITS)
Get-ChildItem $DestinationDirectory -Force -Recurse | Where {$_.Length -eq 0} | Remove-Item -Force -Recurse | Out-Null

# destroy client
$wc = $Null

#add summaries
Write-Output "Summary               :"
Write-Output "Files Aready Existing : $FilesAlreadyExisting" | Tee-Object -filepath "$logs" -Append
Write-Output "New Files Added       : $NewFilesAdded" | Tee-Object -filepath "$logs" -Append
Write-Output "Files Errored         : $FilesErrored" | Tee-Object -filepath "$logs" -Append


